{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Web scrapping with python and beautiful soup\n",
    "#import the tools\n",
    "import requests\n",
    "from requests import get\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "\n",
    "from time import sleep\n",
    "from random import randint\n",
    "\n",
    "#initialize empty lists to store the data\n",
    "lokasi = []\n",
    "harga = []\n",
    "tahun_dibangun = []\n",
    "daya_listrik = []\n",
    "kamar_tidur = []\n",
    "kamar_mandi = []\n",
    "lantai_rumah = []\n",
    "luas_rumah = []\n",
    "luas_tanah = []\n",
    "garasi = []\n",
    "kamar_art = []\n",
    "kamarmandi_art = []\n",
    "\n",
    "pages = np.arange(1, 10753, 1)\n",
    "\n",
    "for page in pages:\n",
    "    print(\"##########\")\n",
    "    print(page)\n",
    "    page = requests.get(\"https://www.lamudi.co.id/west-java/depok/house/single-family-house/buy/?page=\"\n",
    "                        + str(page))\n",
    "    sleep(randint(2, 10))\n",
    "    soup = BeautifulSoup(page.text, 'html.parser')\n",
    "\n",
    "    rumah_div = soup.find_all('div', class_='ListingCell-AllInfo ListingUnit')\n",
    "    lokasi_div = soup.find_all('div', class_='ListingCell-KeyInfo-address ellipsis')\n",
    "\n",
    "    #initiate the for loop \n",
    "    #this tells your scraper to iterate through \n",
    "    #every div container we stored in lokasi_div or rumah_div\n",
    "    for container in lokasi_div:\n",
    "        #lokasi\n",
    "        location = ' '.join(container.find('a', class_='js-listing-link ellipsis').text.split())\n",
    "        lokasi.append(location)\n",
    "\n",
    "    for container in rumah_div:\n",
    "        #harga\n",
    "        price = container.get(\"data-price\")\n",
    "        harga.append(price)\n",
    "        \n",
    "        #tahun_dibangun\n",
    "        year_building = container.get(\"data-year_built\")\n",
    "        tahun_dibangun.append(year_building)\n",
    "        \n",
    "        #daya_listrik\n",
    "        power_capacity = container.get(\"data-electricity\")\n",
    "        daya_listrik.append(power_capacity)\n",
    "        \n",
    "        #kamar_tidur\n",
    "        bedrooms = container.get(\"data-bedrooms\")\n",
    "        kamar_tidur.append(bedrooms)\n",
    "        \n",
    "        #kamar_mandi\n",
    "        bathrooms = container.get(\"data-bathrooms\")\n",
    "        kamar_mandi.append(bathrooms)\n",
    "        \n",
    "        #lantai_rumah\n",
    "        floors = container.get(\"data-floors_total\")\n",
    "        lantai_rumah.append(floors)\n",
    "        \n",
    "        #luas_rumah\n",
    "        house_area = container.get(\"data-building_size\")\n",
    "        luas_rumah.append(house_area)\n",
    "        \n",
    "        #luas_tanah\n",
    "        surface_area = container.get(\"data-land_size\")\n",
    "        luas_tanah.append(surface_area)\n",
    "        \n",
    "        #garasi\n",
    "        car_space = container.get(\"data-car_spaces\")\n",
    "        garasi.append(car_space)\n",
    "        \n",
    "        #kamar_art\n",
    "        maidrooms = container.get(\"data-maidrooms\")\n",
    "        kamar_art.append(maidrooms)\n",
    "        \n",
    "        #kamarmandi_art\n",
    "        maidbathrooms = container.get(\"data-maidbathrooms\")\n",
    "        kamarmandi_art.append(maidbathrooms)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Building DataFrame with pandas\n",
    "houses = pd.DataFrame({    \n",
    "'lokasi': lokasi,\n",
    "'harga': harga,\n",
    "'tahun_dibangun': tahun_dibangun,\n",
    "'daya_listrik': daya_listrik,\n",
    "'kamar_tidur': kamar_tidur,\n",
    "'kamar_mandi': kamar_mandi,\n",
    "'lantai_rumah': lantai_rumah,\n",
    "'luas_rumah': luas_rumah,\n",
    "'luas_tanah': luas_tanah,\n",
    "'garasi': garasi,\n",
    "'kamar_art': kamar_art,\n",
    "'kamarmandi_art': kamarmandi_art\n",
    "})\n",
    "\n",
    "houses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Data cleaning with pandas\n",
    "\n",
    "#convert object to another datatypes\n",
    "houses = houses.astype({\"kamar_tidur\": int,\"kamar_mandi\": int,\"harga\": 'int64',\"luas_rumah\": float,\n",
    "                       \"luas_tanah\": float})\n",
    "\n",
    "#Replace None with NaN\n",
    "houses = houses.fillna(value = np.nan)\n",
    "\n",
    "houses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "houses.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#menghapus missing values pada pandas data frame\n",
    "\n",
    "#backup data\n",
    "houses_backup = houses.copy(deep = True)\n",
    "\n",
    "#menghapus kolom yang mengandung missing values\n",
    "houses = houses.dropna(axis = 'columns')\n",
    "#houses.head()\n",
    "\n",
    "#menghapus baris yang mengandung missing values\n",
    "houses = houses_backup.copy (deep = True)\n",
    "houses = houses.dropna(axis = 'rows')\n",
    "\n",
    "#started index from 1\n",
    "houses.index = np.arange(1, len(houses)+1)\n",
    "\n",
    "houses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "houses.to_csv('houses_after_cleaning_january.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
